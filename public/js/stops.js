// Generated by CoffeeScript 1.4.0
var routeID;
var map;
//var stopPopulation = 0;
$(window).load(function() {
	stopQuery()
})
function initialize() {
	var mapOptions = {
		zoom : 8,
		center : new google.maps.LatLng(33.755, -84.39),
		mapTypeId : google.maps.MapTypeId.ROADMAP
	};
	map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
}

function buildFTQuery(query) {
	var url = [fusionURL];
	url.push('?sql=');
	url.push(encodeURIComponent(query))
	url.push('&callback=?');
	url.push('&key=' + googleKey);
	return url.join('');
}

function buildCensus(query) {
	var url = [censusURL];
	url.push('?get=');
	url.push(query)
	url.push('&key=' + censusKey);
	url.push('&jsonp=?')
	return url.join('');
}

function stopQuery() {
	var url = buildFTQuery("SELECT stop_name, stop_lat, stop_lon FROM " + stopsTableID + " WHERE stop_id = " + stopID)
	$.ajax({
		url : url,
		dataType : "jsonp"
	}).done(function(data) {
		if (data['rows']) {
			$('#stopname').html(data['rows'][0][0])
			name = data['rows'][0][0]
			latlng = data['rows'][0][1] + ", " + data['rows'][0][2]
			blockQuery(name, latlng)
			yelpQuery(latlng, 0.25)
			addMap(name, new google.maps.LatLng(data['rows'][0][1], data['rows'][0][2]))
		} else {
			$('#stopname').html("Sorry that isn't a stop")
			console.log('not a valid stop')
		}
	});
}

function addMap(name, latlng) {
	initialize();
	map.setCenter(latlng)
	map.setZoom(15)
	var radius = new google.maps.Circle({
		center : latlng,
		map : map,
		radius : 402.336,
		clickable : false,
		strokeColor : "#43A2CA",
		strokeOpacity : 0.9,
		strokeWeight : 2,
		fillColor : "#43A2CA",
		fillOpacity : 0.5
	})
	var marker = new google.maps.Marker({
		position : latlng,
		map : map,
		title : name
	})
}

function yelpQuery(latlng, radius) {
	$.ajax({
		url : '/api/yelp/' + latlng + '/' + radius,
	}).done(function(data) {
		$('#numrest').html(data.total)
		$.each(data.businesses, function(index, value) {
			$('#restlist').append('<li>' + value.name + '</li>')
		})
		console.log(data)
	})
}

function blockQuery(name, latlng) {
	//console.log(name, latlng)
	var url = buildFTQuery("SELECT TRACTCE10, BLKGRPCE10, ALAND10, COUNTYFP10 FROM " + fusionCensusID + " WHERE ST_INTERSECTS(geometry, CIRCLE(LATLNG(" + latlng + "), 400))")
	$.ajax({
		url : url,
		dataType : "jsonp"
	}).done(function(data) {
		if (data['rows']) {
			censusQuery(data['rows'])
			console.log(data['rows'])
		} else {
			console.log('not a valid block')
		}
	})
}

function censusQuery(data) {
	var stopPopulation = 0;
	var area = 0;
	var blockCount = data.length
	$.each(data, function(index, value) {
		//$('#blocks').append('<li>' + value[0] + " : " + value[1] + '</li>')
		area += parseFloat(value[2])
		var url = buildCensus("P0010001&for=block+group:" + value[1] + "&in=state:13+county:" + value[3] + "+tract:" + value[0])
		console.log(url)
		$.ajax({
			url : url,
			dataType : 'jsonp'
		}).done(function(popdata) {
			stopPopulation += parseInt(popdata[1][0])
			console.log(stopPopulation)
			blockCount--
			if (blockCount == 0) {
				calculatePopulation(stopPopulation, area)
			}
		})
	})
	$('#totarea').html(Math.round(area / Math.pow(1609.34, 2) * 100) / 100 + " miles<sup>2</sup>")
	$('#searcharea').html("0.25 miles")
	//console.log('area = ' + area)
}

function calculatePopulation(pop, area) {
	wpop = (Math.PI * 160000 * pop) / (area)
	$('#totpop').html(pop)
	$('#weightedpop').html(Math.round(wpop))
	//console.log('weighted population is = ' + wpop)
}

var buildQuery, censusKey, censusURL, fusionCensusID, fusionURL, googleKey, latlng, obj, params, pop_tract, routesQuery, routesTableID, stopsRoutesQuery, stopsRoutesTableID, stopsTableID, _i, _len;

tables = [];
stopsTableID = "11eAYt_iVmfFIa_sUJ6WNq44Y48LrQ7WHD_Pm4_Q";

fusionCensusID = "1_sDkzl__TpmRcvngVaVPQSwn4Jhcw7fcGKZtRw";

stopsRoutesTableID = "1k8rQw5krM5mUr5-2Q-vytLMAn8iIGDMF5jYXcOw";

routesTableID = "1vAAlfeAvvUQumHs64tYW5uBOduboZ-eu4jrQGQk";

censusKey = "ae0a36244578b82533c25a3aea85bb66052aecfc";

googleKey = "AIzaSyBhwGfhVZK2JpmMVelyTojjHVSqbSyM1ls";

censusURL = "http://api.census.gov/data/2010/sf1";

fusionURL = "https://www.googleapis.com/fusiontables/v1/query";

stopsRoutesQuery = "SELECT route_id FROM " + stopsRoutesTableID + " WHERE stop_id = ";

routesQuery = "SELECT route_short_name, route_long_name FROM " + routesTableID + " WHERE route_id = ";

